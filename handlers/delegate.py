import logging
from html import escape
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states import BotStates
from keyboards import CONFIRM_INLINE_KEYBOARD
from session import SESSIONS

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "üì§ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å")
async def delegate_start(msg: Message, state: FSMContext):
    uid = msg.from_user.id

    if uid not in SESSIONS:
        logger.warning(f"‚õî –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: user_id={uid}")
        return await msg.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ `/auth <PRIVATE_KEY>`")

    await state.set_state(BotStates.waiting_for_delegate_input)
    logger.info(f"üü° –û–∂–∏–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ —Å—É–º–º—ã ENERGY –æ—Ç user_id={uid}")
    await msg.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ENERGY, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å.\n"
        "–ü—Ä–∏–º–µ—Ä: `Txxxxx 300`"
    )


@router.message(BotStates.waiting_for_delegate_input)
async def handle_delegate_input(msg: Message, state: FSMContext):
    uid = msg.from_user.id

    session = SESSIONS.get(uid)
    if not session:
        logger.warning(f"‚õî –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Å–µ—Å—Å–∏–∏ user_id={uid}")
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth <PRIVATE_KEY>")
        return await state.clear()

    try:
        to_address, energy_str = msg.text.strip().split()
        energy = int(float(energy_str))
        trx_amount = int(energy / 10.08)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑ TronLink

        await state.update_data(
            to_address=to_address,
            energy=energy,
            trx_amount=trx_amount,
        )
        await state.set_state(BotStates.waiting_for_delegate_confirm)

        await msg.answer(
            f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ENERGY:\n"
            f"üî∏ –ê–¥—Ä–µ—Å: `{to_address}`\n"
            f"üî∏ ENERGY: {energy}\n",
            reply_markup=CONFIRM_INLINE_KEYBOARD
        )

    except Exception as e:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ENERGY user_id={uid}: {e}")
        await msg.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `Txxxxx 300` ‚Äî –∞–¥—Ä–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ENERGY.")
        await state.clear()


@router.callback_query(F.data.in_(["confirm_delegate", "cancel_delegate"]))
async def handle_delegate_confirm(cb: CallbackQuery, state: FSMContext):
    uid = cb.from_user.id
    data = await state.get_data()

    if cb.data == "cancel_delegate":
        await cb.message.edit_text("‚ùå –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        logger.info(f"üö´ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ user_id={uid}")
        return await state.clear()

    session = SESSIONS.get(uid)
    if not session:
        logger.warning(f"‚õî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ —Å–µ—Å—Å–∏–∏ user_id={uid}")
        await cb.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /auth <PRIVATE_KEY>")
        return await state.clear()

    try:
        client = session["client"]
        pk = session["pk"]
        from_address = session["address"]

        tx = (
            client.trx.delegate_resource(
                owner=from_address,
                receiver=data["to_address"],
                balance=int(data["trx_amount"] * 1_000_000),
                resource="ENERGY",
                lock=False,
            )
            .fee_limit(5_000_000)
            .build()
        )

        result = tx.sign(pk).broadcast()
        txid = result.get("txid", "N/A")

        logger.info(f"‚úÖ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–æ {data['energy']} ENERGY –æ—Ç {from_address} –Ω–∞ {data['to_address']} (TX: {txid})")

        await cb.message.edit_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ `{data['energy']}` ENERGY –Ω–∞ `{data['to_address']}`\n"
            f"TX ID: `{txid}`"
        )

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ user_id={uid}")
        await cb.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏:\n`{escape(str(e))}`")
    finally:
        await state.clear()
