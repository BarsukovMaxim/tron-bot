import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from html import escape
from session import SESSIONS
from states import BotStates

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "üìä –ë–∞–ª–∞–Ω—Å")
async def balance(msg: Message, state: FSMContext):
    uid = msg.from_user.id
    session = SESSIONS.get(uid)
    if not session:
        logger.warning(f"‚õî –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–µ–∑ —Å–µ—Å—Å–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
        return await msg.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ `/auth <PRIVATE_KEY>`")

    try:
        client = session["client"]
        address = session["address"]

        balance = client.get_account_balance(address)
        res = client.get_account_resource(address)

        energy_total = res.get('EnergyLimit', 0)
        energy_used = res.get('EnergyUsed', 0)
        bw_total = res.get('freeNetLimit', 0)
        bw_used = res.get('freeNetUsed', 0)

        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–ø—Ä–æ—Å–∏–ª –±–∞–ª–∞–Ω—Å {address}: {balance} TRX")

        await msg.answer(
            f"üí∞ –ê–¥—Ä–µ—Å: `{address}`\n"
            f"TRX: {balance}\n"
            f"‚ö° Energy: {energy_total - energy_used} / {energy_total}\n"
            f"üì∂ Bandwidth: {bw_total - bw_used} / {bw_total}"
        )
        await state.clear()
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:\n`{escape(str(e))}`")
        await state.clear()
