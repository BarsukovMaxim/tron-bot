import logging
from aiogram import Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from html import escape
from tronpy.keys import PrivateKey
from tron.client import create_tron_client
from keyboards import KEYBOARD
from session import SESSIONS
from datetime import datetime, timedelta, timezone

router = Router()
logger = logging.getLogger(__name__)

@router.message(CommandStart())
async def cmd_start(msg: Message, state: FSMContext):
    await state.clear()
    logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª /start")
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É `/auth <PRIVATE_KEY>` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(Command("auth"))
async def cmd_auth(msg: Message, state: FSMContext):
    uid = msg.from_user.id
    args = msg.text.strip().split()

    if len(args) != 2:
        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /auth –æ—Ç user_id={uid}")
        return await msg.answer("–§–æ—Ä–º–∞—Ç: `/auth <PRIVATE_KEY>`")

    private_key = args[1]
    if len(private_key) != 64:
        logger.warning(f"‚õî –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–ª–∏–Ω—ã –æ—Ç user_id={uid}")
        return await msg.answer("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 64 —Å–∏–º–≤–æ–ª–∞ (hex)")

    try:
        pk = PrivateKey(bytes.fromhex(private_key))
        client = create_tron_client()
        address = pk.public_key.to_base58check_address()

        SESSIONS[uid] = {
            "pk": pk,
            "client": client,
            "address": address,
            "expires": datetime.now(timezone.utc) + timedelta(minutes=10)
        }

        await state.clear()
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è user_id={uid}, address={address}")
        await msg.answer(
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
            f"–í–∞—à –∞–¥—Ä–µ—Å: `{address}`\n"
            f"–°–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ 10 –º–∏–Ω—É—Ç.",
            reply_markup=KEYBOARD
        )

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ user_id={uid}")
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n`{escape(str(e))}`")
        await state.clear()
